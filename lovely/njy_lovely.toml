[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# prevent chip total from triggering end of round
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.chips - G.GAME.blind.chips >= 0 or G.GAME.current_round.hands_left < 1 then"
position = "at"
payload = '''
if G.GAME.current_round.hands_left < 1 then
'''
match_indent = true

# talisman override (janky)
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if Big:new(G.GAME.chips) >= Big:new(G.GAME.blind.chips) or G.GAME.current_round.hands_left < 1 then"
position = "at"
payload = '''
if G.GAME.current_round.hands_left < 1 then
'''
match_indent = true

# lobcorp override
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips) or G.GAME.current_round.hands_left <= 0 then"
position = "at"
payload = '''
if G.GAME.current_round.hands_left <= 0 then
'''
match_indent = true

# prevent a dumbass bug by preventing a piece of code from running? why does this run?? thunk????
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 then"
position = "after"
payload = '''
end
if this_should_never_run_vg3dcw2vgubhijonbi then
'''
match_indent = true

# add ugly end round button
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''G.SETTINGS.play_button_pos == 1 and play_button or discard_button,'''
position = "after"
payload = '''
{n=G.UIT.R, config={id = 'njy_endround_button',align = "tm", padding = 0.3, r = 0.1, minw = 2.5, minh = button_height, hover = true, colour = G.C.GREEN, button = "njy_endround", one_press = true, shadow = true, func = 'njy_can_endround'}, nodes={
      {n=G.UIT.R, config={align = "cm", padding = 0}, nodes={
        {n=G.UIT.T, config={text = "End Round", scale = text_scale, colour = G.C.UI.TEXT_LIGHT, focus_args = {button = 'y', orientation = 'bm'}, func = 'set_button_pip'}}
      }}
    }}
'''
match_indent = true

# REALLY dumb code to swap colour, updates every frame (lmfao)
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.C.DARK_EDITION[2] = math.min(self.C.DARK_EDITION[3], self.C.DARK_EDITION[1])"
position = "after"
payload = '''
	if self.GAME and self.GAME.chips and self.GAME.blind and self.GAME.blind.chips then
		if not to_big then
			function to_big(x) return x end
		end
		if to_big(self.GAME.chips) >= to_big(self.GAME.blind.chips) then
			self.C.CHIPS_REQUIRED[1] = 0.2941
			self.C.CHIPS_REQUIRED[2] = 0.76
			self.C.CHIPS_REQUIRED[3] = 0.5725
		else
			self.C.CHIPS_REQUIRED[1] = 1
			self.C.CHIPS_REQUIRED[2] = 0.3725
			self.C.CHIPS_REQUIRED[3] = 0.3333
		end
	else
		self.C.CHIPS_REQUIRED[1] = 1
		self.C.CHIPS_REQUIRED[2] = 0.3725
		self.C.CHIPS_REQUIRED[3] = 0.3333
	end
'''
match_indent = true

# change colour of chips required in UI_def (makes chip total green if requirement is met)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={ref_table = G.GAME.blind, ref_value = 'chip_text', scale = 0.001, colour = G.C.RED, shadow = true, id = 'HUD_blind_count', func = 'blind_chip_UI_scale'}}"
position = "at"
payload = '''
{n=G.UIT.T, config={ref_table = G.GAME.blind, ref_value = 'chip_text', scale = 0.001, colour = G.C.CHIPS_REQUIRED, shadow = true, id = 'HUD_blind_count', func = 'blind_chip_UI_scale'}}
'''
match_indent = true

# change colour of chips in cashout screen for parity
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "{n=G.UIT.T, config={text = G.GAME.blind.chip_text, scale = scale_number(G.GAME.blind.chips, scale, 100000), colour = G.C.RED, shadow = true}}"
position = "at"
payload = '''
{n=G.UIT.T, config={text = G.GAME.blind.chip_text, scale = scale_number(G.GAME.blind.chips, scale, 100000), colour = G.C.GREEN, shadow = true}}
'''
match_indent = true

# insert new colour into globals.lua
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "RED = HEX('FE5F55'),"
position = "before"
payload = '''
CHIPS_REQUIRED = {0,0,0,1},
'''
match_indent = true

# add keybind for ending round
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "if key == 'v' then"
position = "before"
payload = '''
if key == G.njy_keybind then
	if G.STATE_COMPLETE == true and G.buttons and G.buttons.states and G.buttons.states.visible and G.buttons.states.visible == true and G.GAME and G.GAME.chips and G.GAME.blind and G.GAME.blind.chips then
		if not to_big then
			function to_big(x) return x end
		end
		if to_big(G.GAME.chips) >= to_big(G.GAME.blind.chips) then
			stop_use()
			G.STATE = G.STATES.NEW_ROUND
			end_round()
		end
end
'''
match_indent = true
